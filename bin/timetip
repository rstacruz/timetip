#!/usr/bin/env node
// vim:ft=javascript

var cli        = require('commander');
var extend     = require('util')._extend;
var _          = require('underscore');
var f          = require('../lib/formatter');
var T          = require('../lib/reporters/default').theme;
var S          = require('../lib/reporters/default').symbols;
var openEditor = require('../lib/helpers').openEditor;
var printUsage = require('../lib/helpers').printUsage;
var duration   = require('../lib/helpers').duration;
var isToday    = require('../lib/helpers').isToday;

cli
  .version(require('../package').version)
  .option('-f, --file <path>', 'the data file [~/.timelogs]', '~/.timelogs')
  .option('-R, --reporter <r>', 'use reporter (default|json)', 'default')
  .option('--no-color', 'disable colors', true)
  .on('--help', function() {
    if (!cli.color) process.env.NO_COLOR = true;

    function us(str) { printUsage(cli._name, str, "1;34"); }
    function ex(str) { printUsage(cli._name, str, 36); }
    function p(str)  { console.log(str); }

    p('  Shortcuts:');
    us('t <task>             # start working (alias: `start`)');
    us('t - [<reason>]       # stop working (alias: `stop`)');
    us('t <date>             # show entries for the date (alias: `show`)');
    us('t                    # show today (alias: `show today`)');
    p('');
    p('  Logging tasks:');
    us('t start <task>       # start working');
    us('t stop [<reason>]    # stop working');
    p('');
    p('  Other commands:');
    us('t show <date>          # show entries for the date');
    us('t show <date> - <end>  # show entries for date range');
    us('t show all             # show all entries');
    us('t dates                # show dates with time logs');
    us('t edit                 # open in text editor');
    p('');
    p('  Examples:');
    ex('t Myproject stuff    # start working on "myproject stuff"');
    ex('t Meeting 3m ago     # start working on "meeting" 3 minutes ago');
    ex('t stop               # stop the current task');
    ex('t stop lunch break   # stop the current task and log the reason');
    p('');
    ex('t Sep 2              # show entries from a day');
    ex('t May 5 - May 10     # show entries a range');
    ex('t 4 days ago         # show entries from 4 days ago');
    ex('t Yesterday          # show entries from yesterday');
  });

var TimeLog = require('../lib/time_log');

/*
 * The controller
 */

var log, reporter;

extend(cli, {
  status: function() {
    var date = new Date();
    var data = this.getLogs(date);
    if (!data.last) return this.noLogs(date);

    this.getReporter().day(data);
  },

  dates: function() {
    var r = this.getReporter();
    if (!r.dates) return;

    var dates = this.getLog().dates();
    if (dates.length === 0) {
      this._tip('');
      this._err(f('no entries logged yet.'));
      this.gettingStarted();
      return;
    }

    r.dates(dates);
  },

  query: function(date) {
    if (!date)
      this._die('invalid date.');

    if (date.constructor === Array)
      this._die('date ranges not supported yet. soon!');

    var data = this.getLogs(date);
    this.getReporter().day(data);
  },

  // Start or stop
  log: function(spec) {
    if (!spec) return this.invalidUsage();

    this.getLog().push(spec).save();
    this.getReporter().day(this.getLog().get(spec.date), { added: true });
  },

  /* ---- */

  noLogs: function(date) {
    console.error('');

    if (isToday(date)) {
      this._ok ('nothing logged yet today.');
      this.gettingStarted();
    }
    else
      this._err(f('nothing logged for %s',
        T.accent(isToday(date) ? 'today' : date.format('{month} {dd}, {yyyy}'))));

    process.exit(0);
  },

  gettingStarted: function() {
    this._tip(f('start now! try: %s %s',
      T.accent(cli._name),
      T.accent("<what you're doing>")));
    this._tip('');
    this._tip("see `"+cli._name+" --help` for more info.");
  },

  _ok: function(str) {
    console.error(f(' %s  %s', T.now(S.check), str));
  },

  _die: function(str) {
    this._tip('');
    this._err(str);
    process.exit(26);
  },

  _err: function(str) {
    console.error(f(' %s  %s', T.err(S.cross), str));
  },

  _tip: function(str) {
    console.error('    '+str);
  },

  /**
   * Returns logs for a given `date` or dies with a message
   * @private
   */

  getLogs: function(date) {
    var data = this.getLog().get(date);
    if (!data) return this.noLogs(date);
    return data;
  },

  getLog: function() {
    if (log) return log;

    log = new TimeLog(cli.file);
    return log;
  },

  /**
   * Returns the reporter asked for in `--reporter`
   * @private
   */

  getReporter: function() {
    if (reporter) return reporter;

    var Reporters = require('..').reporters;
    var Reporter = Reporters[cli.reporter];

    if (!Reporter)
      this._die("unknown reporter `"+cli.reporter+"`");

    reporter = new Reporter(log);
    return reporter;
  },

  run: function(argv) {
    cli.parse(argv);

    var DateParser = require('../lib/date_parser');
    var SpecParser = require('../lib/spec_parser');
    var cmd  = cli.args[0] || '';
    var rest = cli.args.slice(1).join(' ');
    var args = cli.args.join(' ');

    var date, spec;

    if (!cli.color)
      process.env.NO_COLOR = true;

    if (cmd === 'edit')
      openEditor(cli.file);
    else if (cmd === 'dates')
      this.dates();
    else if (cmd === 'stop' || cmd === '-')
      this.log(SpecParser(rest, { mode: 'break' }));
    else if (cmd === 'start')
      this.log(SpecParser(rest));
    else if (cmd === 'all' || args === 'show all')
      this._die('`show all` not supported yet. soon!');
    else if (cmd === 'show' && rest === '')
      this.query(new Date());
    else if (cmd === 'show')
      this.query(DateParser.any(rest));
    else if (cmd === '')
      this.status();
    else if (date = DateParser.any(args))
      this.query(date);
    else if (spec = SpecParser(args))
      this.log(spec);
  }
});

cli.run(process.argv);
