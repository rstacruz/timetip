#!/usr/bin/env node
// vim:ft=javascript

var cli = require('commander');
var extend = require('util')._extend;

cli
  .version(require('../package').version)
  .option('-f, --file <path>', 'the data file [~/.timelogs]', '~/.timelogs')
  .on('--help', function() {
    console.log('  Usage:');
    console.log('');
    console.log('    '+cli._name+' [start] <project> [<task>]  # start working');
    console.log('    '+cli._name+' stop [<reason>]             # stop working');
    console.log('');
    console.log('    '+cli._name+' [status]                    # show current status');
    console.log('    '+cli._name+' summary                     # summarize log for all dates');
    console.log('');
    console.log('    '+cli._name+' <date>                      # show entries');
    console.log('    '+cli._name+' <date> - <date>             # show entries for date range');
    console.log('');
    console.log('  Examples:');
    console.log('');
    console.log('    '+cli._name+' myproject                   # start working on "myproject"');
    console.log('    '+cli._name+' stop                        # stop tracking');
    console.log('    '+cli._name+' stop lunch break            # stop tracking and log the reason');
    console.log('    '+cli._name+' 2 days ago                  # show entries from 2 days ago');
  })
  .parse(process.argv);

var DateParser = require('../lib/date_parser');
var SpecParser = require('../lib/spec_parser');
var TimeLog    = require('../lib/time_log');
var duration   = require('../lib/helpers').duration;
var c          = require('../lib/helpers').color;
var f          = require('printf');
var _          = require('underscore');

var cmd  = cli.args[0] || '';
var rest = cli.args.slice(1).join(' ');
var args = cli.args.join(' ');

var date, spec;

/*
 * The controller
 */

var dot = '⋅';
var dash = '┄ ';
var gt = '›';
var peg = '✈';
var chk = '✓';

function puts(str, options) {
  var pre = '          ';
  if (options && options.prefix) pre = '   '+options.prefix+' '+gt;
  console.log(pre, str);
}

App = {
  log: new TimeLog(cli.file),

  status: function() {
    this.statusToday();
  },

  statusToday: function() {
    var self = this;
    var day = _.last(this.log.dates());
    var entries = this.log.day(day);
    var now = this.log.now(day);

    puts(day.format('{month} {dd} {yyyy}'), { prefix: 'today' });
    puts("");

    entries.forEach(function(entry) { self.entry(entry); });
    if (now)
      self.entry(now, { now: true });

    console.log('');
  },

  query: function(date) {
    console.log("Entries for ", date);
  },

  entry: function(entry, options) {
    var time = entry.date.format(App.log.formats.time);
    var sep = '  ';
    var str, dur;

    if (entry.type === 'task')
      str = f("%s %s", c(entry.project, 34), entry.task);
    else if (entry.reason)
      str = c(dash + ' ' + entry.reason + ' ' + dash, 30);
    else
      str = c(dash + dash, 30);

    if (options && options.now) {
      time = c(chk + ' ' + time, 32);
      dur = c(duration(new Date() - entry.date)+'+', 32);
      console.log(f('%26s %s %-65s  %s', time, sep, str, dur));
    } else {
      time = c(time, 30);
      dur = c(duration(entry.duration), 34);
      console.log(f('%26s %s %-65s  %s', time, sep, str, dur));
    }
  }
};

if (cmd === '' || cmd.match(/^(st|status)$/)) {
  App.status();
}

else if (cmd.match(/^(stop|x|break)$/)) {
  var reason = cli.args.slice(1).join(' ');
  App.log.push({ type: 'break', reason: reason, date: new Date() }).save();
  App.status();
}

else if (cmd.match(/^(summary)$/)) {
  App.log.dates().forEach(function(date) {
    App.query(date);
  });
}

else if (cmd.match(/^(start)$/)) {
  spec = SpecParser(test);
  App.log.push(extend(spec, { date: new Date() })).save();
  App.status();
}

else if (date = DateParser(args)) {
  App.query(date);
}

else if (spec = SpecParser(args)) {
  App.log.push(extend(spec, { date: new Date() })).save();
  App.status();
}

else {
  console.error(""+cli._name+": invalid usage");
  console.error("try `"+cli._name+" --help` for more info");
  process.exit(26);
}
