#!/usr/bin/env node
// vim:ft=javascript

var cli        = require('commander');
var extend     = require('util')._extend;
var f          = require('printf');
var c          = require('../lib/helpers').color;
var openEditor = require('../lib/helpers').openEditor;
var printUsage = require('../lib/helpers').printUsage;

cli
  .version(require('../package').version)
  .option('-f, --file <path>', 'the data file [~/.timelogs]', '~/.timelogs')
  .option('--edit', 'open the data file in a text editor')
  .on('--help', function() {
    function usage(str) { printUsage(cli._name, str, 36); }
    function ex(str)    { printUsage(cli._name, str, 32); }
    console.log('  Logging tasks:');
    usage('t start <task>       # start working');
    usage('t start <task> +<N>  # start working, offset N minutes');
    usage('t stop [<reason>]    # stop working');
    console.log('');
    console.log('  Viewing logs:');
    usage('t                      # show today');
    usage('t show <date>          # show entries for the date');
    usage('t show <date> - <end>  # show entries for date range');
    console.log('');
    console.log('  Shortcuts:');
    usage('t <task>             # start working (alias: `start`)');
    usage('t <date>             # show entries for the date (alias: `show`)');
    console.log('');
    console.log('  Examples:');
    ex('t Myproject stuff    # start working on "Myproject stuff"');
    ex('t stop               # stop the current task');
    ex('t stop lunch break   # stop the current task, and log the reason');
    console.log('');
    ex('t Sept 2             # show entries september 2');
    ex('t 4 days ago         # show entries from 4 days ago');
    ex('t Yesterday          # show entries from yesterday');
  })
  .parse(process.argv);

var DateParser = require('../lib/date_parser');
var SpecParser = require('../lib/spec_parser');
var TimeLog    = require('../lib/time_log');
var duration   = require('../lib/helpers').duration;
var _          = require('underscore');
var Reporter   = require('../lib/reporters/default');

var cmd  = cli.args[0] || '';
var rest = cli.args.slice(1).join(' ');
var args = cli.args.join(' ');

var date, spec;

/*
 * The controller
 */

App = {
  log: new TimeLog(cli.file),

  status: function() {
    this.statusToday();
  },

  noLogs: function(date) {
    console.log(cli._name+": no logs yet for "+date.format('{yyyy}-{MM}-{dd}'));
    console.log("start one with: `"+cli._name+" <your task>`");
    console.log("see `"+cli._name+" --help` for more info.");
  },

  statusToday: function() {
    var self = this;
    var date = new Date();

    if (!date) {
      this.noLogs(date);
      process.exit(0);
    }

    Reporter.day(this.log.get(date), { log: this.log });
    return;
  },

  query: function(date) {
    console.log("Entries for ", date);
  },
};

if (cli.edit) {
  openEditor(cli.file);
}

else if (cmd === '') {
  App.status();
}

else if (cmd === 'stop' || cmd === '-') {
  var reason = cli.args.slice(1).join(' ');
  App.log.push({ type: 'break', reason: reason, date: new Date() }).save();
  App.status();
}

else if (cmd === 'start') {
  spec = SpecParser(rest);
  App.log.push(extend(spec, { date: new Date() })).save();
  App.status();
}

else if (cmd === 'show') {
  App.query(DateParser(rest));
}

else if (date = DateParser(args)) {
  App.query(date);
}

else if (spec = SpecParser(args)) {
  App.log.push(extend(spec, { date: new Date() })).save();
  App.status();
}

else {
  console.error(""+cli._name+": invalid usage");
  console.error("try `"+cli._name+" --help` for more info");
  process.exit(26);
}
