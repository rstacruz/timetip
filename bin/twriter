#!/usr/bin/env node
// vim:ft=javascript

var cli        = require('commander');
var extend     = require('util')._extend;
var f          = require('printf');
var c          = require('../lib/helpers').color;
var openEditor = require('../lib/helpers').openEditor;
var printUsage = require('../lib/helpers').printUsage;

cli
  .version(require('../package').version)
  .option('-f, --file <path>', 'the data file [~/.timelogs]', '~/.timelogs')
  .option('--edit', 'open the data file in a text editor')
  .on('--help', function() {
    function us(str) { printUsage(cli._name, str, 36); }
    function ex(str) { printUsage(cli._name, str, 32); }
    function p(str)  { console.log(str); }

    p('  Logging tasks:');
    us('t start <task>       # start working');
    us('t start <task> +<N>  # start working, offset N minutes');
    us('t stop [<reason>]    # stop working');
    p('');
    p('  Viewing logs:');
    us('t                      # show today');
    us('t show <date>          # show entries for the date');
    us('t show <date> - <end>  # show entries for date range');
    p('');
    p('  Shortcuts:');
    us('t <task>             # start working (alias: `start`)');
    us('t - [<reason>]       # stop working (alias: `stop`)');
    us('t <date>             # show entries for the date (alias: `show`)');
    p('');
    p('  Examples:');
    ex('t Myproject stuff    # start working on "Myproject stuff"');
    ex('t stop               # stop the current task');
    ex('t stop lunch break   # stop the current task, and log the reason');
    p('');
    ex('t Sept 2             # show entries september 2');
    ex('t 4 days ago         # show entries from 4 days ago');
    ex('t Yesterday          # show entries from yesterday');
  })
  .parse(process.argv);

var DateParser = require('../lib/date_parser');
var SpecParser = require('../lib/spec_parser');
var TimeLog    = require('../lib/time_log');
var duration   = require('../lib/helpers').duration;
var _          = require('underscore');
var Reporter   = require('../lib/reporters/default');

var cmd  = cli.args[0] || '';
var rest = cli.args.slice(1).join(' ');
var args = cli.args.join(' ');

var date, spec;

/*
 * The controller
 */

var log = new TimeLog(cli.file);
var reporter = new Reporter(log);

App = {
  status: function() {
    var data = this.getLogs(new Date());
    reporter.day(data);
  },

  query: function(date) {
    var data = this.getLogs(date);
    reporter.day(data);
  },

  start: function(spec) {
    var date = new Date();
    log.push(extend(spec, { date: date })).save();
    reporter.day(log.get(date), { added: true });
  },

  stop: function(reason) {
    log.push({ type: 'break', reason: reason, date: new Date() }).save();
    this.status();
  },

  /* ---- */

  invalidUsage: function() {
    console.error(""+cli._name+": invalid usage");
    console.error("try `"+cli._name+" --help` for more info");
    process.exit(26);
  },

  noLogs: function(date) {
    console.error(cli._name+": no logs for "+date.format('{yyyy}-{MM}-{dd}'));
    console.error('');
    console.error("start one with: `"+cli._name+" <your task>`");
    console.error("see `"+cli._name+" --help` for more info.");
    process.exit(0);
  },

  /**
   * Returns logs for a given `date` or dies with a message
   * @private
   */

  getLogs: function(date) {
    var data = log.get(date);
    if (!data) return this.noLogs(date);
    return data;
  }
};

if (cli.edit)
  openEditor(cli.file);
else if (cmd === '')
  App.status();
else if (cmd === 'stop' || cmd === '-')
  App.stop(rest);
else if (cmd === 'start')
  App.start(SpecParser(rest));
else if (cmd === 'show')
  App.query(DateParser(rest));
else if (date = DateParser(args))
  App.query(date);
else if (spec = SpecParser(args))
  App.start(spec);
else
  App.invalidUsage();
